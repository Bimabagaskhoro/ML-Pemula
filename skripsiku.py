# -*- coding: utf-8 -*-
"""skripsiku.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-8uUyhrNFu7XPNIXgREXJeeDNXs-ZFdq
"""

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.layers import Input
import numpy as np
import matplotlib.pyplot as plt
import os

!pip install -q kaggle
from google.colab import files
files.upload()

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
!ls ~/.kaggle

!kaggle datasets download -d idhamozi/indonesian-sign-language-bisindo

# unzip
!mkdir bisindo
!unzip -qq indonesian-sign-language-bisindo.zip -d bisindo
!ls bisindo

!ls bisindo/dataset-bisindo/
!ls bisindo/dataset-bisindo/datatrain/
!ls bisindo/dataset-bisindo/datatest/

bisindo = os.path.join('bisindo/dataset-bisindo/datatrain/')

print(os.listdir(bisindo))

list_bisindo = os.listdir(bisindo)
print(list_bisindo)

from PIL import Image
total = 0

for x in list_bisindo:
  dir = os.path.join(bisindo, x)
  y = len(os.listdir(dir))
  print(x+':', y)
  total = total + y
  
  img_name = os.listdir(dir)
  for z in range(4):
    img_path = os.path.join(dir, img_name[z])
    img = Image.open(img_path)
    print('-',img.size)
  print('---------------')

print('\nTotal :', total)

import numpy as np
import matplotlib.pyplot as plt

fig, ax = plt.subplots(2, 2, figsize=(15,15))
fig.suptitle("Randomly displays images.", fontsize=24)
bisindo_sorted = sorted(list_bisindo)
bisindo_id = 0
for i in range(2):
  for j in range(2):
    try:
      bisindo_selected = bisindo_sorted[bisindo_id] 
      bisindo_id += 1
    except:
      break
    if bisindo_selected == '.TEMP':
        continue
    bisindo_selected_images = os.listdir(os.path.join(bisindo, bisindo_selected))
    bisindo_selected_random = np.random.choice(bisindo_selected_images)
    img = plt.imread(os.path.join(bisindo, bisindo_selected, bisindo_selected_random))
    ax[i][j].imshow(img)
    ax[i][j].set_title(bisindo_selected, pad=10, fontsize=22)
    
plt.setp(ax, xticks=[],yticks=[])
plt.show

#Split into Training and Validation
train_dir = "bisindo/dataset-bisindo/datatrain/"

train_datagen = ImageDataGenerator(rescale=1./255, validation_split=0.2)  

train_dataset = train_datagen.flow_from_directory(
                batch_size=32,
                directory=train_dir,
                target_size=(224, 224), 
                subset="training",
                color_mode="rgb",
                shuffle=True,
                class_mode='categorical')

validation_dataset = train_datagen.flow_from_directory(
                batch_size=32,
                directory=train_dir,
                target_size=(224, 224), 
                subset="validation",
                color_mode="rgb",
                shuffle=True,
                class_mode='categorical')

print(validation_dataset.class_indices)
print(train_dataset.class_indices)

#Use Transfer Learning with MobileNet
base_model = MobileNetV2(
    weights="imagenet", 
    input_shape=(200, 200, 3),
    include_top=False 
) 
base_model.trainable = False

inputs = Input(shape=(200, 200, 3))

x = base_model(inputs, training=False)
x = tf.keras.layers.GlobalAveragePooling2D()(x)
x = tf.keras.layers.Dense(128, activation="relu")(x)
outputs = tf.keras.layers.Dense(27, activation='softmax')(x)

model = tf.keras.Model(inputs, outputs)
model.summary()

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.95 and logs.get('val_accuracy')>0.95):
      print("\nAccuracy above 95%, finish training!")
      self.model.stop_training = True

callbacks = myCallback()

int_lr = 1e-4
num_epochs = 5
 
optimizer = tf.optimizers.Adam(lr=int_lr)
model.compile(optimizer=optimizer,
              loss='categorical_crossentropy',
              metrics=['accuracy'])

history = model.fit(train_dataset,
              epochs=num_epochs,
              validation_data=validation_dataset,
              callbacks = [callbacks])

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.show()

#Model Evaluation
score = model.evaluate(validation_dataset, verbose=0)
print(f'Test loss: {score[0]} / Test accuracy: {score[1]}')

converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

with tf.io.gfile.GFile('dataset.tflite', 'wb') as f:
  f.write(tflite_model)